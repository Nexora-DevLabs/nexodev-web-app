name: PR Title Check

on:
  pull_request:
    types: [opened, edited, synchronize, reopened, ready_for_review]

permissions:
  pull-requests: write
  issues: write

jobs:
  check-title:
    runs-on: ubuntu-latest
    steps:
      # 1) App token (Nexoroid)
      - name: Generate Nexoroid installation token
        id: app-token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      # 2) Conventional Commit type validation
      - name: Validate PR title (Conventional Commits)
        id: semantic
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        with:
          types: |
            feat
            fix
            chore
            docs
            style
            refactor
            perf
            test
            ci
            build
            revert

      # 3) Additional style checks (subject ≤ 72 chars, no trailing ".")
      - name: Style checks (length & punctuation)
        id: stylecheck
        run: |
          set -euo pipefail
          TITLE="${{ github.event.pull_request.title }}"
          echo "Title: $TITLE"

          # Write a tiny Node script to validate style precisely
          cat > check.js <<'JS'
          const title = process.env.PR_TITLE || "";
          const cc = /^(?<type>feat|fix|chore|docs|style|refactor|perf|test|ci|build|revert)(\([\w\s./-]+\))?(?<bang>!)?:\s(?<subject>.+)$/i;
          const out = { ok: true, reasons: [] };

          const m = title.match(cc);
          if (!m) {
            out.ok = false;
            out.reasons.push("Title does not match `type(scope)?: subject` pattern.");
          } else {
            const subject = m.groups.subject.trim();
            const len = subject.length;
            if (len === 0) { out.ok = false; out.reasons.push("Subject is empty after the colon."); }
            if (len > 72) { out.ok = false; out.reasons.push(`Subject is too long (${len} > 72 characters).`); }
            if (/[.。]\s*$/.test(subject)) { out.ok = false; out.reasons.push("Subject must not end with a full stop."); }
          }

          console.log(JSON.stringify(out));
          JS

          export PR_TITLE="$TITLE"
          RESULT_JSON="$(node check.js)"
          echo "Style result: $RESULT_JSON"

          OK="$(echo "$RESULT_JSON" | jq -r '.ok')"
          REASONS="$(echo "$RESULT_JSON" | jq -r '.reasons | join("\n- ")')"

          echo "ok=$OK" >> "$GITHUB_OUTPUT"
          echo "reasons=$REASONS" >> "$GITHUB_OUTPUT"

      # 4) Summarise in Checks tab
      - name: Write summary
        run: |
          set -euo pipefail
          TITLE="${{ github.event.pull_request.title }}"
          SEM_CONCLUSION="${{ steps.semantic.conclusion }}"
          STYLE_OK="${{ steps.stylecheck.outputs.ok }}"
          REASONS="${{ steps.stylecheck.outputs.reasons }}"

          {
            echo "### PR Title Check"
            echo ""
            echo "**Title:** \`$TITLE\`"
            echo ""
            if [ "$SEM_CONCLUSION" = "success" ] && [ "$STYLE_OK" = "true" ]; then
              echo "✅ PR title is valid. Follows Conventional Commits and style (≤ 72 chars, no trailing full stop)."
            else
              echo "❌ PR title is invalid."
              echo ""
              echo "**Expected format:** \`type(scope)?: subject\`"
              echo "Examples:"
              echo "- \`feat: add dark mode toggle\`"
              echo "- \`fix: handle null organisation id\`"
              echo "- \`chore: bump dependencies\`"
              echo ""
              echo "**Style rules:** subject ≤ 72 characters; no trailing full stop."
              if [ -n "$REASONS" ] && [ "$REASONS" != "null" ]; then
                echo ""
                echo "**Style issues detected:**"
                # prefix each reason with a dash
                while IFS= read -r line; do
                  [ -n "$line" ] && echo "- $line"
                done <<< "$REASONS"
              fi
            fi
          } >> "$GITHUB_STEP_SUMMARY"

      # 5) Block merge if invalid
      - name: Fail if invalid
        if: steps.semantic.conclusion != 'success' || steps.stylecheck.outputs.ok != 'true'
        run: |
          echo "PR title does not meet Conventional Commits and/or style requirements."
          exit 1
